<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eats.mapper.store.StoreMainMapper">
	<select id = "dailySell" resultType = "Integer">
		SELECT 
			NVL(SUM(TOTAL_CNT), 0) as totalamount
		FROM 
			SELL
		WHERE 
			STORE_IDX = #{store_idx}
		AND 
			TRUNC(SELL_DATE) = TRUNC(SYSDATE)
	</select>
	<select id = "dailyReserve" resultType="Integer">
		SELECT 
			NVL(COUNT(*),0) as reservcnt
		FROM 
			RESERVATION
		WHERE 
			STORE_IDX = 1
		AND 
			TRUNC(RESERVE_DATE) = TRUNC(SYSDATE)
	</select>
	<select id = "gendercnt" resultType="com.eats.store.model.main.GenderCntDTO">
		SELECT 
		    u.USER_GENDER as gender,
		    COUNT(*) as visitorcnt
		FROM 
			RESERVATION r
		JOIN 
			EATS_USER u ON r.USER_IDX = u.USER_IDX
		WHERE 
			r.STORE_IDX = #{store_idx}
		AND 
			TO_CHAR(r.RESERVE_DATE, 'YYYY-MM') = TO_CHAR(sysdate,'yyyy-mm')
		AND 
			r.RESERVE_STATE = 3
		GROUP BY 
			u.USER_GENDER
	</select>
	<select id="monthResereve" resultType="com.eats.store.model.main.MonthCntDTO">
		WITH MONTHS AS (
		    SELECT 
		        LPAD(LEVEL, 2, '0') AS month
		    FROM 
		    	DUAL
		    CONNECT BY 
		    	LEVEL <![CDATA[<=]]> TO_NUMBER(TO_CHAR(SYSDATE, 'MM'))
		)
		SELECT 
		    m.month,
		    NVL(r.reservecnt, 0) AS reservecnt,
		    NVL(r.totalcnt, 0) AS totalcnt
		FROM MONTHS m
		LEFT JOIN (
		    SELECT 
		        TO_CHAR(reserve_date, 'MM') AS month,
		        COUNT(*) AS reservecnt,
		        SUM(reserve_count) AS totalcnt
		    FROM 
		    	reservation
		    WHERE 
		    	store_idx = #{store_idx}
		    AND 
		    	TO_CHAR(reserve_date, 'yyyy') = TO_CHAR(SYSDATE, 'yyyy')
		    AND 
		    	reserve_state = 3
		    GROUP BY 
		    	TO_CHAR(reserve_date, 'MM')
		) r ON 
			m.month = r.month
		ORDER BY 
			m.month
	</select>
	<select id = "reserveWaitingCnt" resultType = "Integer">
		SELECT 
			COUNT(*) as waitingcnt
		FROM 
			RESERVATION
		WHERE 
			STORE_IDX = #{store_idx}
		AND 
			RESERVE_STATE = 0
		AND 
			TRUNC(RESERVE_DATE) = TRUNC(SYSDATE)
	</select>
	<select id="reserveNoshowOrCancel" resultType = "com.eats.store.model.main.ReserveNoshowDTO">
		SELECT 
		    r.RESERVE_STATE as reserveState,
		    COUNT(*) as statecnt
		FROM 
			RESERVATION r
		WHERE 
			r.STORE_IDX = #{store_idx}
		AND 
			TRUNC(r.RESERVE_DATE) = TRUNC(SYSDATE)
		AND 
			r.RESERVE_STATE IN (2, 4)
		GROUP BY 
			r.RESERVE_STATE
	</select>
	<select id="reserveWeek" resultType = "com.eats.store.model.main.ReserveWeekDTO">
		WITH DATE_RANGE AS (
		    SELECT 
		        TRUNC(SYSDATE) - (LEVEL-1) AS SALE_DATE
		    FROM 
		    	DUAL
		    CONNECT BY 
		    	LEVEL <![CDATA[<=]]> 7
		),
		BUSINESS_DAYS AS (
		    SELECT 
		        dr.SALE_DATE,
		        TO_CHAR(dr.SALE_DATE, 'MM/DD') as display_date
		    FROM 
		    	DATE_RANGE dr
		    WHERE 
		    	EXISTS (
		        	SELECT 
		        		1 
		        	FROM 
		        		STORE_TIME st 
		        	WHERE 
		        		st.STORE_IDX = #{store_idx} 
		        	AND 
		        		st.STIME_DAY = 
		            CASE TO_CHAR(dr.SALE_DATE, 'D')
		                	WHEN '2' THEN '월'
			                WHEN '3' THEN '화'
			                WHEN '4' THEN '수'
			                WHEN '5' THEN '목'
			                WHEN '6' THEN '금'
			                WHEN '7' THEN '토'
			                WHEN '1' THEN '일'
			            END
		    )
		)
		SELECT 
		    bd.display_date as saleDate,
		    NVL(SUM(s.TOTAL_CNT), 0) as totalAmount
		FROM 
			BUSINESS_DAYS bd
		LEFT JOIN 
			SELL s ON TRUNC(s.SELL_DATE) = bd.SALE_DATE 
    	AND 
    		s.STORE_IDX = #{store_idx}
    	AND 
    		s.SELL_STAT = 1
		GROUP BY 
			bd.SALE_DATE, bd.display_date
		ORDER 
			BY bd.SALE_DATE
	</select>
	<select id = "reserveTimeSlotWithToday" resultType = "com.eats.store.model.main.ReserveToTimeDTO">
		WITH STORE_HOURS AS (
	    SELECT 
	        STIME_START, 
	        STIME_END,
	        STIME_BREAK
	    FROM 
	    	STORE_TIME 
	    WHERE 
	    	STORE_IDX = #{store_idx}
	    AND 
	    	STIME_DAY = 
	        	CASE TO_CHAR(SYSDATE, 'D')
		            WHEN '2' THEN '월'
		            WHEN '3' THEN '화'
		            WHEN '4' THEN '수'
		            WHEN '5' THEN '목'
		            WHEN '6' THEN '금'
		            WHEN '7' THEN '토'
		            WHEN '1' THEN '일'
		        END
		),
		TIME_SLOTS AS (
		    SELECT 
		        TO_CHAR(TO_DATE(STIME_START, 'HH24:MI') + (LEVEL-1)*30/1440, 'HH24:MI') AS time_slot
		    FROM 
		    	STORE_HOURS
		    CONNECT BY 
		    	TO_CHAR(TO_DATE(STIME_START, 'HH24:MI') + (LEVEL-1)*30/1440, 'HH24:MI') <![CDATA[<=]]> STIME_END
		),
		RESERVATION_COUNT AS (
		    SELECT 
		        RESERVE_TIME,
		        COUNT(*) as reservation_count,
		        SUM(RESERVE_COUNT) as guest_count
		    FROM 
		    	RESERVATION
		    WHERE 
		    	STORE_IDX = #{store_idx}
		    AND 
		    	TRUNC(RESERVE_DATE) = TRUNC(SYSDATE)
		    AND 
		    	RESERVE_STATE = 1
		    GROUP BY 
		    	RESERVE_TIME
		)
		SELECT 
		    ts.time_slot as timeSlot,
		    NVL(rc.reservation_count, 0) as reservationCount,
		    NVL(rc.guest_count, 0) as guestCount
		FROM 
			TIME_SLOTS ts
		LEFT JOIN 
			RESERVATION_COUNT rc ON ts.time_slot = rc.RESERVE_TIME
		WHERE 
			ts.time_slot NOT BETWEEN 
		    SUBSTR((SELECT STIME_BREAK FROM STORE_HOURS), 1, 5)
		AND
		    SUBSTR((SELECT STIME_BREAK FROM STORE_HOURS), 7, 5)
		ORDER BY 
			ts.time_slot
	</select>
	<select id = "reserveReq" resultType = "com.eats.store.model.main.ReserveReqDTO">
		SELECT 
		    RESERVE_TIME as reserveTime,
		    RESERVE_COUNT as reservecnt,
		    REQUEST as request
		FROM 
			RESERVATION 
		WHERE 
			STORE_IDX = #{store_idx}
		AND 
			TRUNC(RESERVE_DATE) = TRUNC(SYSDATE)
		AND 
			RESERVE_STATE = 1
		AND 
			REQUEST IS NOT NULL
		AND 
			REQUEST <![CDATA[!=]]> ''
		ORDER 
			BY RESERVE_TIME
	</select>
	
	<select id="sellCompare" resultType = "com.eats.store.model.main.SelltwlwDTO">
		SELECT (
			SELECT 
				NVL(SUM(TOTAL_CNT), 0)
			FROM 
				SELL
			WHERE 
				STORE_IDX = #{store_idx}
			AND 
				SELL_STAT = 1
			AND 
				TRUNC(SELL_DATE) = TRUNC(SYSDATE)) as thisWeekAmount,(
				SELECT 
					NVL(SUM(TOTAL_CNT), 0)
				FROM 
					SELL
				WHERE 
					STORE_IDX = #{store_idx}
				AND 
					SELL_STAT = 1
				AND 
					TRUNC(SELL_DATE) = TRUNC(SYSDATE - 7)) as lastWeekAmount
				FROM 
					DUAL
	</select>
	<select id="sellTop3Menu" resultType = "com.eats.store.model.main.SellTop3MenuDTO">
	SELECT * FROM (
	    SELECT 
	        m.MENU_NAME as menuName,
	        COUNT(sd.MENU_IDX) * SUM(sd.ORDER_NUM) as totalCount
	    FROM 
	    	SELL s
	    JOIN 
	    	SELL_DETAIL sd ON s.SELL_IDX = sd.SELL_IDX
	    JOIN 
	    	MENU m ON sd.MENU_IDX = m.MENU_IDX
	    WHERE 
	    	s.STORE_IDX = 1
	    AND 
	    	s.SELL_STAT = 1
	    AND 
	    	TRUNC(s.SELL_DATE) = TRUNC(SYSDATE)
	    GROUP BY 
	    	m.MENU_NAME
	    ORDER BY 
	    	totalCount DESC
	) WHERE 
		ROWNUM <![CDATA[<=]]> 3
	</select>
</mapper>